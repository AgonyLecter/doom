<!DOCTYPE html>
<html>
  <head>
    <title>Web AR Viewer</title>
    <script src="https://aframe.io/releases/1.2.0/aframe.min.js"></script>
    <script src="https://cdn.jsdelivr.net/gh/AR-js-org/AR.js/aframe/build/aframe-ar.min.js"></script>
    <script src="https://cdn.jsdelivr.net/gh/fcor/arjs-gestures/dist/gestures.js"></script>
    <style>
      body {
        margin: 0;
        overflow: hidden;
        font-family: Arial, sans-serif;
      }
      #startButton {
        position: absolute;
        bottom: 20px;
        left: 50%;
        transform: translateX(-50%);
        padding: 10px 20px;
        background-color: #28a745;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 16px;
      }
      #startButton:disabled {
        background-color: #ccc;
        cursor: not-allowed;
      }
    </style>
  </head>
  <body>
    <a-scene embedded arjs="sourceType: webcam; debugUIEnabled: false;" gesture-detector>
      <a-assets timeout="10000">
        <a-asset-item id="glb-model" src="model.glb"></a-asset-item>
      </a-assets>

      <!-- 3D Model initially hidden -->
      <a-entity id="model" gltf-model="#glb-model" position="0 0 -5" scale="0.5 0.5 0.5" visible="false" rotation="0 0 0" gesture-handler="minScale: 0.5; maxScale: 2"></a-entity>

      <a-camera-static></a-camera-static>
    </a-scene>

    <button id="startButton" onclick="showModel()">Mostra il Modello 3D</button>

    <script>
      function showModel() {
        const model = document.querySelector('#model');
        if (model) {
          model.setAttribute('visible', 'true');
          model.setAttribute('animation', 'property: position; to: 0 1 -3; dur: 1000; easing: easeOutQuad');
          document.querySelector('#startButton').disabled = true;
        }
      }

      // Verifica se il modello Ã¨ caricato correttamente
      document.querySelector('#glb-model').addEventListener('load', () => {
        console.log('Modello caricato con successo');
      });

      // Gestisce eventuali errori di caricamento
      document.querySelector('#glb-model').addEventListener('error', (error) => {
        console.error('Caricamento del modello fallito:', error);
      });

      // Controllo per evitare di registrare due volte il componente
      if (!AFRAME.components['gesture-handler']) {
        // Componente per gestire i gesti per il modello
        AFRAME.registerComponent('gesture-handler', {
          schema: {
            enabled: {default: true},
            minScale: {default: 0.5},
            maxScale: {default: 2}
          },
          init: function () {
            this.handleRotation = this.handleRotation.bind(this);
            this.handlePinch = this.handlePinch.bind(this);
            this.el.sceneEl.addEventListener('onefingermove', this.handleRotation);
            this.el.sceneEl.addEventListener('twofingermove', this.handlePinch);
          },
          remove: function () {
            this.el.sceneEl.removeEventListener('onefingermove', this.handleRotation);
            this.el.sceneEl.removeEventListener('twofingermove', this.handlePinch);
          },
          handleRotation: function (event) {
            if (!this.data.enabled) return;
            const rotation = this.el.getAttribute('rotation');
            rotation.y += event.detail.positionChange.x * 0.5;
            this.el.setAttribute('rotation', rotation);
          },
          handlePinch: function (event) {
            if (!this.data.enabled) return;
            let scale = this.el.getAttribute('scale');
            const newScale = scale.x * (1 + event.detail.spreadChange / 200);
            scale.x = scale.y = scale.z = Math.min(Math.max(newScale, this.data.minScale), this.data.maxScale);
            this.el.setAttribute('scale', scale);
          }
        });
      }
    </script>
  </body>
</html>
